cmake_minimum_required(VERSION 3.10)
project(qgp C)

# Version
set(VERSION_MAJOR 1)
set(VERSION_MINOR 2)

# Auto-increment patch version based on git commit count since last minor version bump
# This gives us: 1.2.0, 1.2.1, 1.2.2, etc. automatically with each commit
execute_process(
    COMMAND git rev-list --count HEAD
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE GIT_COMMIT_COUNT
    OUTPUT_STRIP_TRAILING_WHITESPACE
    ERROR_QUIET
)

# If git command fails (e.g., not a git repo), default to 0
if(NOT GIT_COMMIT_COUNT)
    set(GIT_COMMIT_COUNT 0)
endif()

# Use commit count as patch version for continuous versioning
set(VERSION_PATCH ${GIT_COMMIT_COUNT})

# Build info
execute_process(
    COMMAND git log -1 --format=%h
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE GIT_COMMIT_HASH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

string(TIMESTAMP BUILD_TIMESTAMP "%Y-%m-%d")
message("Build date: ${BUILD_TIMESTAMP}")
message("Git SHA: ${GIT_COMMIT_HASH}")

set(QGP_VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
set(BUILD_TS "${BUILD_TIMESTAMP}")
set(BUILD_HASH "${GIT_COMMIT_HASH}")

add_definitions("-DQGP_VERSION=\"${QGP_VERSION}\"")
add_definitions("-DBUILD_TS=\"${BUILD_TS}\"")
add_definitions("-DBUILD_HASH=\"${BUILD_HASH}\"")

# Platform detection
if(WIN32)
    add_definitions(-D_WIN32)
    message(STATUS "Platform: Windows")
    set(PLATFORM_SOURCES qgp_platform_windows.c)
    set(PLATFORM_LIBS bcrypt)  # Windows CNG for random number generation
else()
    message(STATUS "Platform: Linux/Unix")
    set(PLATFORM_SOURCES qgp_platform_linux.c)
    set(PLATFORM_LIBS)  # No extra libs needed on Linux
endif()

# SDK Independence: OpenSSL for AES-256, SHA256, Base64, Random
find_package(OpenSSL REQUIRED)
if(OPENSSL_FOUND)
    message(STATUS "OpenSSL found: ${OPENSSL_VERSION}")
    message(STATUS "OpenSSL include: ${OPENSSL_INCLUDE_DIR}")
    message(STATUS "OpenSSL libraries: ${OPENSSL_LIBRARIES}")
endif()

# SDK Independence: Vendored cryptographic implementations
add_subdirectory(crypto/kyber512)   # Kyber512 KEM (includes FIPS202/SHAKE256)
add_subdirectory(crypto/dilithium)  # Dilithium3 signatures

# Main executable
add_executable(${PROJECT_NAME}
    main.c
    keygen.c
    sign.c
    verify.c
    export.c
    encrypt.c
    decrypt.c
    keyring.c
    utils.c
    armor.c
    aes_keywrap.c
    bip39.c
    bip39_pbkdf2.c
    seed_derivation.c
    kyber_deterministic.c
    # SDK Independence: New crypto modules
    qgp_random.c
    qgp_aes.c
    qgp_kyber.c
    qgp_dilithium.c
    # SDK Independence: Infrastructure modules
    qgp_key.c
    qgp_signature.c
    qgp_utils_standalone.c
    # Cross-platform abstraction layer
    ${PLATFORM_SOURCES}
)

# Link flags
set_property(TARGET ${PROJECT_NAME} APPEND_STRING PROPERTY LINK_FLAGS "-D_GNU_SOURCE")

# Link libraries (SDK Independence: No SDK libraries needed)
target_link_libraries(${PROJECT_NAME}
    OpenSSL::Crypto  # OpenSSL (AES, SHA256, Base64, Random)
    kyber512         # Vendored Kyber512 KEM (includes FIPS202/SHAKE256)
    dilithium        # Vendored Dilithium3 signatures
    ${PLATFORM_LIBS} # Platform-specific libraries (bcrypt on Windows)
)

# Platform-specific link libraries
if(NOT WIN32)
    # Linux/Unix only
    target_link_libraries(${PROJECT_NAME}
        m                # Math library
        pthread          # Threading
    )
endif()

# Include directories (SDK Independence: No SDK includes needed)
target_include_directories(${PROJECT_NAME} PRIVATE
    ${CMAKE_SOURCE_DIR}        # QGP source directory
    ${OPENSSL_INCLUDE_DIR}     # OpenSSL headers
)

# Build type configuration
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_C_FLAGS_DEBUG "-g -O0 -DDEBUG")
    add_definitions("-DDEBUG")
    message(STATUS "Debug build enabled")
else()
    set(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG")
    message(STATUS "Release build enabled")
endif()

# Platform-specific install paths
if(WIN32)
    # Windows: Install to current directory
    install(TARGETS ${PROJECT_NAME} DESTINATION .)
else()
    # Linux/Unix: Install to /usr/local/bin
    install(TARGETS ${PROJECT_NAME} DESTINATION bin)
endif()
